package hibernate;

import java.util.EnumSet;
import java.util.HashMap;

// Generated Oct 15, 2008 10:13:30 PM by Hibernate Tools 3.2.2.GA

/**
 * Itinerary generated by hbm2java
 */
@SuppressWarnings("serial")
public class Itinerary implements java.io.Serializable {

	/**
	 * Enumeration type for the status of a flight in the itinerary
	 */
   public enum EStatus {
      CANCELED("canceled"), BOOKED("booked"), RESERVED("reserved");

      private static final HashMap<String, EStatus> reverseMap = new HashMap<String, EStatus>();

      static {
         for (EStatus s : EnumSet.allOf(EStatus.class))
            reverseMap.put(s.toString(), s);
      }

      private String description;

      private EStatus(String description) {
         this.description = description;
      }

      @Override
      public String toString() {
         return this.description;
      }

      public static EStatus get(String code) {
         return reverseMap.get(code);
      }
   }

   /**
    * Enumeration type for the seat class
    */
   public enum ESeatClass {
	      ECONOMY("economy"), BUSINESS("business");

	      private static final HashMap<String, ESeatClass> reverseMap = new HashMap<String, ESeatClass>();

	      static {
	         for (ESeatClass s : EnumSet.allOf(ESeatClass.class))
	            reverseMap.put(s.toString(), s);
	      }

	      private String description;

	      private ESeatClass(String description) {
	         this.description = description;
	      }

	      @Override
	      public String toString() {
	         return this.description;
	      }

	      public static ESeatClass get(String code) {
	         return reverseMap.get(code);
	      }
	   }

   /**
    * The itinerary id
    */
   private ItineraryId id;
   
   /**
    * The customer to whom the itinerary belongs to
    */
   private Customer customer;
   
   /**
    * The flight in the itinerary
    */
   private Flight flight;
   
   /**
    * The status of the flight whether its booked, reserved or canceled
    */
   private EStatus status;

   /**
    * The seat class
    */
   private ESeatClass seatClass;
   
   /**
    * The number of booked seats
    */
   private int numOfSeats;
   
   /**
    * The ticket number
    */
   private String ticketNo;
   
   /**
    * Constructs a new itinerary object
    */
   public Itinerary() {
   }

   /**
    * Constructs a new itinerary object with the given parameters
    * @param id
    * @param customer - the customer 
    * @param flight - the flight 
    */
   public Itinerary(ItineraryId id, Customer customer, Flight flight) {
      this.id = id;
      this.customer = customer;
      this.flight = flight;
   }

   /**
    * Constructs a new itinerary object 
    * @param id - the itinerary id
    * @param customer - the customer to whom the itinerary belongs
    * @param flight - the flight associated with the itinerary
    * @param status - the status of the flight
    */
   public Itinerary(ItineraryId id, Customer customer, Flight flight, String status) {
      this.id = id;
      this.customer = customer;
      this.flight = flight;
      this.status = EStatus.get(status);
   }

   /**
    * Constructs a new itinerary object 
    * @param id - the itinerary id
    * @param customer - the customer to whom the itinerary belongs
    * @param flight - the flight associated with the itinerary
    * @param status - the status of the flight
    * @param ticketNo - the ticketNo
    */
   public Itinerary(ItineraryId id, Customer customer, Flight flight, String status, 
		   String ticketNo) {
	   this.id = id;
	   this.customer = customer;
	   this.flight = flight;
	   this.status = EStatus.get(status);
	   this.ticketNo = ticketNo;
   }
   
   /**
    * Constructs a new itinerary object 
    * @param id - the itinerary id
    * @param customer - the customer to whom the itinerary belongs
    * @param flight - the flight associated with the itinerary
    * @param status - the status of the flight
    * @param numOfSeats - the number of seats
    * @param seatClass - the seat class
    * @param ticketNo - the ticketNo
    */
   public Itinerary(ItineraryId id, Customer customer, Flight flight, String status, 
		   int numOfSeats, String seatClass, String ticketNo) {
	   this.id = id;
	   this.customer = customer;
	   this.flight = flight;
	   this.status = EStatus.get(status);
	   this.numOfSeats = numOfSeats;
	   this.seatClass = ESeatClass.get(seatClass);
	   this.ticketNo = ticketNo;
   }  
   
   /**
    * Returns the itinerary id
    * @return the itinerary id
    */
   public ItineraryId getId() {
      return this.id;
   }

   /**
    * Sets the itinerary id
    * @param id - the itinerary id
    */
   public void setId(ItineraryId id) {
      this.id = id;
   }

   /**
    * Returns the customer to whom the itinerary belongs
    * @return the customer to whom the itinerary belongs
    */
   public Customer getCustomer() {
      return this.customer;
   }

   /**
    * Sets the customer to whom the itinerary belongs
    * @param customer - the customer to whom the itinerary belongs
    */
   public void setCustomer(Customer customer) {
      this.customer = customer;
   }

   /**
    * Returns the flight associated with the itinerary
    * @return the flight associated with the itinerary
    */
   public Flight getFlight() {
      return this.flight;
   }

   /**
    * Sets the flight associated with the itinerary
    * @param flight - the flight associated with the itinerary
    */
   public void setFlight(Flight flight) {
      this.flight = flight;
   }

   /**
    * Returns the status of the flight
    * @return the status of the flight
    */
   public String getStatus() {
      return this.status.toString();
   }

   /**
    * Sets the status of the flight
    * @param status - the status of the flight
    */
   public void setStatus(String status) {
      this.status = EStatus.get(status);
   }

   
   /**
    * Returns the seat class
    * @return the seatClass
    */
   public String getSeatClass() {
	   return this.seatClass.toString();
   }

   /**
    * Sets the seat class
    * @param seatClass the seatClass to set
    */
   public void setSeatClass(String seatClass) {
	   this.seatClass = ESeatClass.get(seatClass);
   }

   /**
    * Returns the number of seats
    * @return the numOfSeats
    */
   public int getNumOfSeats() {
	   return numOfSeats;
   }

   /**
    * Sets the number of seats
    * @param numOfSeats the numOfSeats to set
    */
   public void setNumOfSeats(int numOfSeats) {
	   this.numOfSeats = numOfSeats;
   }

   /**
    * Returns the ticket number
    * @return the ticket number
    */
   public String getTicketNo() {
	   return ticketNo;
   }

   /**
    * Sets the ticket number
    * @param ticketNo - th ticket number
    */
   public void setTicketNo(String ticketNo) {
	   this.ticketNo = ticketNo;
   }
}
