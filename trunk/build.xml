<?xml version="1.0"?>

<project name="proj4398" basedir="." default="usage">
	<property file="build.properties" />

	<!--property name="bin.dir" value="bin"/-->
	<property name="src.dir" value="src" />
	<property name="xml.dir" value="xml" />
	<property name="lib.dir" value="lib" />
	<property name="tld.dir" value="tld" />
	<property name="jsp.dir" value="jsp" />
	<property name="sql.dir" value="sql" />
	<property name="html.dir" value="html" />
	<property name="dist.dir" value="dist" />
	<!--property name="test.dir" value="test" /-->
	<property name="build.dir" value="build" />
	<property name="build.classes.dir" value="build/classes" />
	<property name="build.hbm.dir" value="build/hbm" />
	<property name="build.war.dir" value="build/war" />
	<property name="name" value="proj4398" />

	<path id="master-classpath">
		<!-- We need the servlet API classes: -->
		<!--  * for Tomcat 5/6 use servlet-api.jar -->
		<!--  * for other app servers - check the docs -->
		<fileset dir="${appserver.lib}">
			<include name="servlet*.jar" />
		</fileset>
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${build.classes.dir}" />
	</path>

	<target name="usage">
		<echo message="" />
		<echo message="${name} build file" />
		<echo message="-----------------------------------" />
		<echo message="" />
		<echo message="Available targets are:" />
		<echo message="" />
		<echo message="build       ==> Build the application" />
		<echo message="buildWar    ==> Build WAR file" />
		<echo message="clean       ==> Clean compiled files and WAR file" />
		<echo message="buildtest   ==> Build the tests" />
		<echo message="test        ==> Test all the tests" />
		<echo />
		<echo message="deploy      ==> Deploy application as directory" />
		<echo message="undeploy    ==> Delete deploied application" />
		<!--echo message="install     ==> Install application in Tomcat"/-->
		<echo message="reload      ==> Reload application in Tomcat" />
		<echo message="start       ==> Start Tomcat application" />
		<echo message="stop        ==> Stop Tomcat application" />
		<echo message="list        ==> List Tomcat applications" />
		<echo />
		<!--echo message="startDB     ==> Start up HSQL Database Server" /-->
		<!--echo message="shutdownDB  ==> Shoutdown DB" /-->
		<echo message="manageDB    ==> Manage HSQL Database" />
		<echo message="loadDB      ==> Populate all the data onto DB" />
		<echo message="dropDB      ==> Drop all the tables from DB" />
		<echo message="printDB     ==> Show all the tables on DB" />
		<echo message="deleteDB    ==> Delete all the tables from DB" />
		<echo message="makeHBM     ==> Make *.hbm files, which are Hibernate files" />
		<echo message="" />
	</target>

	<target name="build" description="Compile main source tree java files">
		<mkdir dir="${build.classes.dir}" />
		<javac destdir="${build.classes.dir}" source="1.5" target="1.5" debug="true" deprecation="false" optimize="false" failonerror="true">
			<src path="${src.dir}" />
			<classpath refid="master-classpath" />
            <exclude name="**/*Test.java"/>
            <exclude name="**/*Tests.java"/>
		</javac>
        <copy file="${xml.dir}/hibernate.ant.cfg.xml" tofile="${build.classes.dir}/hibernate.cfg.xml" preservelastmodified="true"/>
		<copy todir="${build.classes.dir}" preservelastmodified="true">
			<fileset dir="${src.dir}">
                <include name="**/*.hbm.xml" />
			</fileset>
		</copy>
        <antcall target="loadDBOnlyWhenSQLFilesAreChanged"/>
	</target>

    <target name="buildWar" depends="build" description="Build WAR file.">
		<mkdir dir="${build.war.dir}" />
		<copy todir="${build.war.dir}" preservelastmodified="true">
			<fileset dir="${html.dir}">
				<include name="**/*.*" />
			</fileset>
		</copy>
        <mkdir dir="${build.war.dir}/WEB-INF" />
		<copy todir="${build.war.dir}/WEB-INF" preservelastmodified="true">
			<fileset dir="${xml.dir}">
				<include name="springapp-servlet.xml" />
			</fileset>
		</copy>

		<copy todir="${build.war.dir}/WEB-INF/classes" preservelastmodified="true">
			<fileset dir="${build.classes.dir}">
				<include name="**/*.class" />
                <exclude name="**/*Test.class"/>
                <exclude name="**/*Tests.class"/>
			</fileset>
			<fileset dir="${build.classes.dir}">
				<include name="**/*.hbm.xml" />
			</fileset>
			<fileset file="${xml.dir}/hibernate.cfg.xml"/>
		</copy>

		<copy todir="${build.war.dir}/WEB-INF/jsp" preservelastmodified="true">
			<fileset dir="${jsp.dir}">
				<include name="**/*.*" />
			</fileset>
		</copy>
		<copy todir="${build.war.dir}/WEB-INF/lib" preservelastmodified="true">
			<fileset dir="${lib.dir}">
				<include name="**/*.*" />
                <exclude name="servlet-api.jar" />
			</fileset>
		</copy>
		<copy todir="${build.war.dir}/WEB-INF/tld" preservelastmodified="true">
			<fileset dir="${tld.dir}">
				<include name="**/*.*" />
			</fileset>
		</copy>

        <mkdir dir="${build.war.dir}/WEB-INF/data" />
        <copy todir="${build.war.dir}/WEB-INF/data" preservelastmodified="true">
			<fileset dir="${build.dir}">
				<include name="*.properties" />
				<include name="*.script" />
			</fileset>
		</copy>

		<war destfile="${dist.dir}/${name}.war" webxml="${xml.dir}/web.xml">
			<fileset dir="${build.war.dir}">
				<include name="**/*" />
			</fileset>
		</war>
    </target>

	<target name="clean" description="Clean compiled files and WAR files">
        <delete file="${dist.dir}/${name}.war"/>
        <delete dir="${build.war.dir}"/>
        <delete dir="${build.classes.dir}"/>
	</target>

	<target name="buildtest" depends="build" description="Compile test tree java files">
		<mkdir dir="${build.classes.dir}" />
		<javac destdir="${build.classes.dir}" source="1.5" target="1.5" debug="true" deprecation="false" optimize="false" failonerror="true">
			<classpath refid="master-classpath" />
            <src path="${src.dir}" />
            <include name="**/*Test.java" />
            <include name="**/*Tests.java" />
		</javac>
	</target>

	<target name="test" depends="buildtest" description="Run tests">
		<junit printsummary="on" fork="false" haltonfailure="false" failureproperty="tests.failed" showoutput="true">

			<classpath refid="master-classpath" />
			<formatter type="brief" usefile="false" />

			<batchtest>
				<fileset dir="${build.classes.dir}">
					<include name="**/*Tests.*" />
					<include name="**/*Test.*" />
				</fileset>
			</batchtest>

		</junit>

		<fail if="tests.failed">
              tests.failed=${tests.failed}
              ***********************************************************
              ***********************************************************
              ****  One or more tests failed!  Check the output ...  ****
              ***********************************************************
              ***********************************************************
        </fail>
	</target>

	<target name="deploy" depends="buildWar" description="Deploy application">
		<!--copy todir="${deploy.path}/${name}" preservelastmodified="true">
			<fileset dir="${build.war.dir}">
				<include name="**/*" />
			</fileset>
		</copy-->
        <!--copy todir="${deploy.path}/${name}/WEB-INF" preservelastmodified="true"
            file="${xml.dir}/web.xml"/-->
		<copy todir="${deploy.path}" preservelastmodified="true">
			<fileset dir="${dist.dir}">
				<include name="*.war" />
			</fileset>
		</copy>
		<!--antcall target="reload"/-->
	</target>

	<target name="undeploy" description="Un-Deploy application">
		<delete dir="${deploy.path}/${name}" />
		<delete file="${deploy.path}/${name}.war" />
		<!--antcall target="reload"/-->
	</target>

	<!-- ============================================================== -->
	<!-- Tomcat tasks - remove these if you don't have Tomcat installed -->
	<!-- ============================================================== -->

	<path id="catalina-ant-classpath">
		<!-- We need the Catalina jars for Tomcat -->
		<!--  * for other app servers - check the docs -->
		<fileset dir="${appserver.lib}">
			<include name="catalina-ant.jar" />
		</fileset>
	</path>

	<!--taskdef name="install" classname="org.apache.catalina.ant.InstallTask">
        <classpath refid="catalina-ant-classpath"/>
    </taskdef-->
	<taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask">
		<classpath refid="catalina-ant-classpath" />
	</taskdef>
	<taskdef name="list" classname="org.apache.catalina.ant.ListTask">
		<classpath refid="catalina-ant-classpath" />
	</taskdef>
	<taskdef name="start" classname="org.apache.catalina.ant.StartTask">
		<classpath refid="catalina-ant-classpath" />
	</taskdef>
	<taskdef name="stop" classname="org.apache.catalina.ant.StopTask">
		<classpath refid="catalina-ant-classpath" />
	</taskdef>
    <taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask">
        <classpath refid="master-classpath" />
    </taskdef>

	<target name="install" description="Install application in Tomcat">
		<install url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}" path="/${name}" war="${name}" />
	</target>

	<target name="reload" description="Reload application in Tomcat">
		<reload url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}" path="/${name}" />
	</target>

	<target name="start" description="Start Tomcat application">
		<start url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}" path="/${name}" />
	</target>

	<target name="stop" description="Stop Tomcat application">
		<stop url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}" path="/${name}" />
	</target>

	<target name="list" description="List Tomcat applications">
		<list url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}" />
	</target>

	<!-- End Tomcat tasks -->

	<!-- Database tasks -->

	<!--target name="startDB" description="Start up HSQL Database Server">
		<echo message="Start up database server using: ${db.location} ${db.urlid}" />
		<java fork="true" spawn="true" classname="org.hsqldb.Server">
			<arg line="-database.0 ${db.location} -dbname.0 ${db.urlid} " />
			<classpath refid="master-classpath" />
		</java>
        <sleep seconds="5"/>
	</target-->

	<target name="manageDB" description="Manage HSQL Database">
		<echo message="Manage database:" />
		<java fork="true" spawn="true" classname="org.hsqldb.util.DatabaseManager">
			<classpath refid="master-classpath" />
			<arg value="-driver" />
			<arg value="${db.driver}" />
			<arg value="-url" />
			<arg value="${db.url}" />
			<arg value="-user" />
			<arg value="${db.user}" />
			<arg value="-password" />
			<arg value="${db.pw}" />
		</java>
	</target>

    <target name="loadDBOnlyWhenSQLFilesAreChanged" depends="checkSqlUpdates" unless="sqlBuild.notRequired">
        <echo message="SQL data has been changed." />
        <antcall target="loadDB"/>
    </target>

    <target name="checkSqlUpdates">
        <uptodate property="sqlBuild.notRequired" targetfile="${build.dir}/${db.urlid}.properties" >
            <srcfiles dir= "${sql.dir}" includes="*.sql"/>
        </uptodate>
    </target>

	<target name="loadDB" description="Populate all the data onto DB">
		<echo message="Load up data using: ${db.driver} ${db.url}" />
		<sql driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.pw}" autocommit="true" caching="true" onerror="continue">
			<classpath refid="master-classpath" />
            <transaction  src="${sql.dir}/airline.sql" />
            <transaction  src="${sql.dir}/airport.sql" />
            <transaction  src="${sql.dir}/customer.sql" />
            <transaction  src="${sql.dir}/flight.sql" />
            <transaction  src="${sql.dir}/itinerary.sql" />
            SHUTDOWN;
		</sql>
	</target>

	<target name="dropDB" description="Drop all the tables from DB">
		<echo message="Drop data using: ${db.driver} ${db.url}" />
		<sql driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.pw}" onerror="continue">
			<classpath refid="master-classpath" />

            DROP TABLE itinerary;
            DROP TABLE flight;
            DROP TABLE customer;
            DROP TABLE airline;
            DROP TABLE airport;
            SHUTDOWN;

        </sql>
	</target>

	<target name="deleteDB" description="Delete all the tables from DB">
		<echo message="Delete data using: ${db.driver} ${db.url}" />
		<sql driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.pw}" autocommit="true" onerror="continue">
			<classpath refid="master-classpath" />

            DELETE FROM itinerary;
            DELETE FROM flight;
            DELETE FROM customer;
            DELETE FROM airport;
            DELETE FROM airline;
            SHUTDOWN;

        </sql>
	</target>

	<target name="printDB" description="Show all the tables on DB">
		<echo message="Print data using: ${db.driver} ${db.url}" />
		<sql driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.pw}" print="true">
			<classpath refid="master-classpath" />

            SELECT * FROM airline;
            SELECT * FROM airport;
            SELECT * FROM customer;
            SELECT * FROM flight;
            SELECT * FROM itinerary;
            SHUTDOWN;

        </sql>
	</target>

	<!--target name="shutdownDB" description="Shoutdown DB">
		<echo message="Shut down database using: ${db.driver} ${db.url}" />
		<sql driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.pw}" onerror="continue">
			<classpath refid="master-classpath" />

        SHUTDOWN;

        </sql>
	</target-->

    <target name="makeHBM" depends="loadDB" description="Make *.hbm files">
		<mkdir dir="${build.hbm.dir}" />
        <hibernatetool destdir="${build.hbm.dir}">
            <jdbcconfiguration
                configurationfile="${xml.dir}/hibernate.ant.cfg.xml"
                packagename="hibernate">
            </jdbcconfiguration>
			<classpath refid="master-classpath" />
            <hbm2cfgxml/>
            <hbm2java jdk5="true"/>
            <hbm2hbmxml destdir="${build.hbm.dir}" /> 
        </hibernatetool>
    </target>
	<!-- End Database tasks -->

</project>
