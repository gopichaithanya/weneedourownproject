package hibernate;
// Generated Oct 15, 2008 10:13:30 PM by Hibernate Tools 3.2.2.GA


import hibernate.Itinerary.EStatus;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

/**
 * Flight generated by hbm2java
 */
@SuppressWarnings({"serial", "unused"})
public class Flight implements java.io.Serializable {

   public enum EFlightStatus {
      AVAILABLE("Availabe"), CANCELED("Canceled");
      
      private String description;
      
      private static final HashMap<String, EFlightStatus> reverseMap = new HashMap<String, EFlightStatus>();

      static {
         for (final EFlightStatus s : EnumSet.allOf(EFlightStatus.class))
            reverseMap.put(s.toString(), s);
      }

      EFlightStatus(String desc) {
         description = desc;
      }
      
      public String getDescription() {
         return description;
      }

      public static EFlightStatus get(String name) {
         return reverseMap.get(name);
      }
   }
   
	/**
	 * The flight number
	 */
	private int flightNo;
	
	/**
	 * The airline
	 */
    private Airline airline;
    
    /**
     * The arrival airport
     */
    private Airport airportByArrivalLocation;
    
    /**
     * The departure airport
     */
    private Airport airportByDepartureLocation;
    
    /**
     * The departure time
     */
    private Date departureTime;
    
    /**
     * The arrival time
     */
    private Date arrivalTime;
    
    /**
     * The number of economy seats available on the flight
     */
    private Integer economySeats;
    
    /**
     * The cost of economy class ticket
     */
    private Float economyPrice;
    
    /**
     * The number of business seats available on the flight
     */
    private Integer businessSeats;
    
    /**
     * The cost of business class ticket
     */
    private Float businessPrice;
    
    /**
    * flight status
    */
   private EFlightStatus status = EFlightStatus.AVAILABLE;
    
    /**
     * The set of itineraries
     */
    private Set<Itinerary> itineraries = new HashSet<Itinerary>();

    /**
     * The data format
     */
    private final static SimpleDateFormat df_ = new SimpleDateFormat("EEE dd-MMM yyyy HH:mm aaa");

    /**
     * Constructs a new flight object
     */
    public Flight() {
    }

	/**
	 * Constructs a new flight object with the given flight number
	 * @param flightNo - the flight number
	 */
    public Flight(int flightNo) {
        this.flightNo = flightNo;
    }
    
    /**
     * Constructs a new flight object with the given parameters
     * @param flightNo
    * @param airline
    * @param airportByDepartureLocation
    * @param airportByArrivalLocation
    * @param departureTime
    * @param arrivalTime
    * @param economySeats
    * @param economyPrice
    * @param businessSeats
    * @param businessPrice
    * @param itineraries
     */
    public Flight(int flightNo, Airline airline, Airport airportByDepartureLocation, Airport airportByArrivalLocation, Date departureTime, Date arrivalTime, Integer economySeats, Float economyPrice, Integer businessSeats, Float businessPrice, Set<Itinerary> itineraries) {
       this.flightNo = flightNo;
       this.airline = airline;
       this.airportByArrivalLocation = airportByArrivalLocation;
       this.airportByDepartureLocation = airportByDepartureLocation;
       this.departureTime = departureTime;
       this.arrivalTime = arrivalTime;
       this.economySeats = economySeats;
       this.economyPrice = economyPrice;
       this.businessSeats = businessSeats;
       this.businessPrice = businessPrice;
       this.itineraries = itineraries;
    }
   
    /**
     * Returns the flight number
     * @return - the flight number
     */
    public int getFlightNo() {
        return this.flightNo;
    }
    
    /**
     * Sets the flight number
     * @param flightNo - the flight number
     */
    public void setFlightNo(int flightNo) {
        this.flightNo = flightNo;
    }
    
    /**
     * Returns the airline object operating this flight
     * @return the airline object
     */
    public Airline getAirline() {
        return this.airline;
    }
    
    /**
     * Sets the airline object which operates the flight
     * @param airline - the airline object
     */
    public void setAirline(Airline airline) {
        this.airline = airline;
    }
    
    /**
     * Returns the arrival airport
     * @return - the arrival airport
     */
    public Airport getAirportByArrivalLocation() {
        return this.airportByArrivalLocation;
    }
    
    /**
     * Sets the arrival airport
     * @param airportByArrivalLocation - the arrival airport
     */
    public void setAirportByArrivalLocation(Airport airportByArrivalLocation) {
        this.airportByArrivalLocation = airportByArrivalLocation;
    }
    
    /**
     * Returns the departure airport
     * @return the departure airport
     */
    public Airport getAirportByDepartureLocation() {
        return this.airportByDepartureLocation;
    }
    
    /**
     * Sets the departure airport
     * @param airportByDepartureLocation - the departure airport
     */
    public void setAirportByDepartureLocation(Airport airportByDepartureLocation) {
        this.airportByDepartureLocation = airportByDepartureLocation;
    }
    
    /**
     * Returns the departure time
     * @return the departure time
     */
    public Date getDepartureTime() {
        return this.departureTime;
    }
    
    /**
     * Sets the departure time
     * @param departureTime - the departure time
     */
    public void setDepartureTime(Date departureTime) {
        this.departureTime = departureTime;
    }
    
    /**
     * Returns the arrival time
     * @return the arrival time
     */
    public Date getArrivalTime() {
        return this.arrivalTime;
    }
    
    /**
     * Sets the arrival time
     * @param arrivalTime - the arrival time
     */
    public void setArrivalTime(Date arrivalTime) {
        this.arrivalTime = arrivalTime;
    }
    
    /**
     * Returns the number of available seats economy class
     * @return the number of available seats economy class
     */
    public Integer getEconomySeats() {
        return this.economySeats;
    }
    
    /**
     * Sets the number of seats available in economy class
     * @param economySeats
     */
    public void setEconomySeats(Integer economySeats) {
        this.economySeats = economySeats;
    }
    
    /**
     * Returns the cost of economy class ticket
     * @return the cost of economy class ticket
     */
    public Float getEconomyPrice() {
        return this.economyPrice;
    }
    
    /**
     * Sets the cost of economy class ticket
     * @param economyPrice - the cost of economy class ticket
     */
    public void setEconomyPrice(Float economyPrice) {
        this.economyPrice = economyPrice;
    }
    
    /**
     * Returns the number of seats available in business class
     * @return the number of seats available in business class
     */
    public Integer getBusinessSeats() {
        return this.businessSeats;
    }
    
    /**
     * Sets the number of seats available in business class
     * @param businessSeats - the number of seats available in business class
     */
    public void setBusinessSeats(Integer businessSeats) {
        this.businessSeats = businessSeats;
    }
    
    /**
     * Returns the cost of business class ticket 
     * @return the cost of business class ticket
     */
    public Float getBusinessPrice() {
        return this.businessPrice;
    }
    
    /**
     * Sets the cost of business class ticket
     * @param businessPrice - the cost of business class ticket
     */
    public void setBusinessPrice(Float businessPrice) {
        this.businessPrice = businessPrice;
    }
    
    /**
     * Return a set of itineraries
     * @return set of itineraries
     */
    public Set<Itinerary> getItineraries() {
        return this.itineraries;
    }
    
    /**
     * Set itineraries
     * @param itineraries - a set of itineraries
     */
    public void setItineraries(Set<Itinerary> itineraries) {
        this.itineraries = itineraries;
    }

    /**
     * Returns the time duration of a flight
     * @return the time duration of a flight
     */
    public long getDurationHours() {
       final Calendar departTime = Calendar.getInstance();
       final Calendar arrivalTime = Calendar.getInstance();
       departTime.setTime(getDepartureTime());
       arrivalTime.setTime(getArrivalTime());
       final long durationHours = Math.round(Math.ceil((arrivalTime.getTimeInMillis() - departTime
             .getTimeInMillis())
             / (1000 * 60 * 60)));
       return durationHours;
    }
    
    /**
     * sets formatted flight number
    * @param flightNoFormatted the flightNoFormatted to set
    */
   public void setFlightNoFormatted(String flightNoFormatted) {
      setFlightNo(Integer.valueOf(flightNoFormatted));
   }

   /**
    * returns formatted flight number
    * @return the flightNoFormatted
    */
   public String getFlightNoFormatted() {
      final DecimalFormat df = new DecimalFormat("000");
      return df.format(getFlightNo());
   }

   /**
    * sets flight status
    * @param status the status to set
    */
   public void setStatus(String status) {
      this.status = EFlightStatus.get(status);
   }

   /**
    * returns flight status
    * @return the status
    */
   public String getStatus() {
      return status.toString();
   }
}


